Imports System.Windows.Forms
Imports System.IO
Imports Inventor

Sub Main()

    Dim oDoc As DrawingDocument = ThisApplication.ActiveDocument
    If oDoc.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then
        MessageBox.Show("Este não é um documento de desenho.")
        Return
    End If

    ' Perguntar código do cliente (prefixo)
    Dim prefixoCliente As String = InputBox("Informe o código do cliente/máquina:", "Código Cliente")
    If String.IsNullOrWhiteSpace(prefixoCliente) Then
        MessageBox.Show("Prefixo inválido.")
        Return
    End If

    ' Selecionar pasta de destino
    Dim pastaDestino As String = SelecionarPasta()
    If String.IsNullOrEmpty(pastaDestino) Then
        MessageBox.Show("Exportação cancelada.", "Aviso")
        Return
    End If

    Dim exportados As Integer = 0
    Dim erros As String = ""

    ' Contar quantos arquivos DXF serão exportados (para a barra de progresso)
    Dim totalExportaveis As Integer = 0
    For Each drawSheet As Sheet In oDoc.Sheets
        For Each drawView As DrawingView In drawSheet.DrawingViews
            Dim refDoc As Document = Nothing
            Try
                refDoc = drawView.ReferencedDocumentDescriptor.ReferencedDocument
            Catch
                Continue For
            End Try
            If refDoc IsNot Nothing AndAlso refDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then
                If refDoc.DocumentSubType.DocumentSubTypeID = "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}" Then
                    totalExportaveis += 1
                    Exit For
                End If
            End If
        Next
    Next

    ' Criar barra de progresso
    Dim oProgressBar As Inventor.ProgressBar = ThisApplication.CreateProgressBar(False, totalExportaveis, "Exportando DXFs")
    oProgressBar.Message = "Iniciando exportação..."

    ' Começar exportação
    For Each drawSheet As Sheet In oDoc.Sheets
        For Each drawView As DrawingView In drawSheet.DrawingViews
            Dim refDoc As Document = Nothing
            Try
                refDoc = drawView.ReferencedDocumentDescriptor.ReferencedDocument
            Catch
                Continue For
            End Try

            If refDoc IsNot Nothing AndAlso refDoc.DocumentType = DocumentTypeEnum.kPartDocumentObject Then

                If refDoc.DocumentSubType.DocumentSubTypeID = "{9C464203-9BAE-11D3-8BAD-0060B0CE6BB4}" Then
                    Dim partDoc As PartDocument = TryCast(refDoc, PartDocument)
                    Dim smDef As SheetMetalComponentDefinition = TryCast(partDoc.ComponentDefinition, SheetMetalComponentDefinition)

                    If smDef IsNot Nothing Then

                        ' Garantir Flat Pattern
                        If Not smDef.HasFlatPattern Then
                            Try
                                smDef.Unfold()
                                smDef.FlatPattern.ExitEdit()
                            Catch ex As Exception
                                erros &= vbCrLf & partDoc.DisplayName & ": ERRO ao criar FlatPattern"
                                Continue For
                            End Try
                        End If

                        ' Obter nome da folha
                        Dim sheetName As String = drawSheet.Name
                        Dim pageNumber As String = "000"
                        If sheetName.Contains(":") Then
                            pageNumber = sheetName.Substring(sheetName.LastIndexOf(":") + 1).PadLeft(3, "0"c)
                        End If

                        ' Obter quantidade personalizada
                        Dim qtdePersonalizada As String = "001"
                        Try
                            qtdePersonalizada = partDoc.PropertySets.Item("User Defined Properties").Item("QTDE PERSONALIZADA").Value.ToString()
                        Catch
                        End Try
                        Dim formattedQtde As String = qtdePersonalizada.PadLeft(3, "0"c) & "X"

                        ' Obter espessura
                        Dim thickness As String = ""
                        Try
                            thickness = partDoc.PropertySets.Item("User Defined Properties").Item("Thickness").Value.ToString()
                        Catch
                            thickness = "0.00"
                        End Try
                        Dim formattedThickness As String = thickness.Replace(" mm", "").Trim()

                        ' Criar nome do arquivo final
                        Dim nomeFinal As String = prefixoCliente & "-" & pageNumber & "-#" & formattedThickness & "-" & formattedQtde & ".dxf"
                        nomeFinal = nomeFinal.Replace(" ", "_")

                        ' Caminho completo para salvar o DXF
                        Dim caminhoDXF As String = System.IO.Path.Combine(pastaDestino, nomeFinal)

                        ' Abrir documento e verificar se está aberto
                        Dim oDocToActivate As Document = Nothing
                        For Each doc As Document In ThisApplication.Documents
                            If doc.FullFileName = partDoc.FullFileName Then
                                oDocToActivate = doc
                                Exit For
                            End If
                        Next
                        If oDocToActivate Is Nothing Then
                            oDocToActivate = ThisApplication.Documents.Open(partDoc.FullFileName)
                        End If

                        ' Informar o usuário para focar na janela do documento para exportação manual
                        MessageBox.Show("Por favor, ative a janela do documento '" & oDocToActivate.DisplayName & "' para executar a exportação manual do DXF." & vbCrLf & _
                                        "Após a exportação, salve o arquivo como:" & vbCrLf & caminhoDXF, "Ação necessária")

                        ' Executar o comando nativo de exportação DXF (manual)
                        Try
                            Dim oCtrlDef As ButtonDefinition = ThisApplication.CommandManager.ControlDefinitions.Item("GeomToDXFCommand")
                            oCtrlDef.Execute()
                            exportados += 1
                        Catch ex As Exception
                            erros &= vbCrLf & nomeFinal & ": ERRO ao executar exportação manual - " & ex.Message
                        End Try

                        oProgressBar.Message = "Exportando: " & nomeFinal
                        oProgressBar.UpdateProgress()

                        Exit For ' Só a primeira vista válida por folha
                    End If
                End If
            End If
        Next
    Next

    oProgressBar.Close()

    ' Mensagem final
    Dim msg As String = "Exportação concluída." & vbCrLf & "Arquivos exportados: " & exportados
    If erros <> "" Then
        msg &= vbCrLf & "Ocorreram erros:" & vbCrLf & erros
    End If
    MessageBox.Show(msg, "Resultado da Exportação")
End Sub

Function SelecionarPasta() As String
    Dim pastaSelecionada As String = ""
    Try
        Dim dialog As New FolderBrowserDialog()
        dialog.Description = "Selecione a pasta para salvar os arquivos DXF"
        If dialog.ShowDialog() = DialogResult.OK Then
            pastaSelecionada = dialog.SelectedPath
        End If
    Catch ex As Exception
        MessageBox.Show("Erro ao selecionar pasta: " & ex.Message)
    End Try
    Return pastaSelecionada
End Function
